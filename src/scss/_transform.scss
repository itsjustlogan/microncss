@use './utils' as *;

$transform: (
  'scale': (
    'prop': 'transform',
    'values': (
      '0': scale(0),
      '50': scale(0.5),
      '75': scale(0.75),
      '90': scale(0.9),
      '100': scale(1),
      '110': scale(1.1),
      '120': scale(1.2),
      '150': scale(1.5),
      '175': scale(1.75),
      '200': scale(2),
      '250': scale(2.5),
      '300': scale(3),
    ),
  ),
  'scale-x': (
    'prop': 'transform',
    'values': (
      '0': scaleX(0),
      '50': scaleX(0.5),
      '75': scaleX(0.75),
      '90': scaleX(0.9),
      '100': scaleX(1),
      '110': scaleX(1.1),
      '120': scaleX(1.2),
      '150': scaleX(1.5),
      '175': scaleX(1.75),
      '200': scaleX(2),
      '250': scaleX(2.5),
      '300': scaleX(3),
    ),
  ),
  'scale-y': (
    'prop': 'transform',
    'values': (
      '0': scaleY(0),
      '50': scaleY(0.5),
      '75': scaleY(0.75),
      '90': scaleY(0.9),
      '100': scaleY(1),
      '110': scaleY(1.1),
      '120': scaleY(1.2),
      '150': scaleY(1.5),
      '175': scaleY(1.75),
      '200': scaleY(2),
      '250': scaleY(2.5),
      '300': scaleY(3),
    ),
  ),
  'rotate': (
    'prop': 'transform',
    'values': (
      '45': rotate(45deg),
      '90': rotate(90deg),
      '-45': rotate(-45deg),
      '-90': rotate(-90deg),
    ),
  ),
  'fade': (
    'prop': 'animation',
    'values': (
      '1': fadein 0.15s ease-in,
      '2': fadein 0.2s ease-in,
      '3': fadein 0.3s ease-in,
      '4': fadein 0.4s ease-in,
      '5': fadein 0.5s ease-in,
    ),
  ),
  'bounce-fade': (
    'prop': 'animation',
    'values': (
      '1': bouncefadein 0.15s ease-in,
      '2': bouncefadein 0.2s ease-in,
      '3': bouncefadein 0.3s ease-in,
      '4': bouncefadein 0.4s ease-in,
      '5': bouncefadein 0.5s ease-in,
    ),
  ),
);

@keyframes fadein {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes bouncefadein {
  0% {
    transform: scale(0);
    opacity: 0;
  }

  50% {
    transform: scale(1.1);
  }

  100% {
    transform: scale(1);
    opacity: 1;
  }
}

// generate utility classes
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .#{$name} {
        #{$prop}: $v;
      }
    } @else {
      .#{$name}-#{$k} {
        #{$prop}: $v;
      }
    }
  }
}

// hover
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .hover\:#{$name}:hover {
        #{$prop}: $v;
      }
    } @else {
      .hover\:#{$name}-#{$k}:hover {
        #{$prop}: $v;
      }
    }
  }
}

// focus
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .focus\:#{$name}:focus {
        #{$prop}: $v;
      }
    } @else {
      .focus\:#{$name}-#{$k}:focus {
        #{$prop}: $v;
      }
    }
  }
}

// active
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .active\:#{$name}:active {
        #{$prop}: $v;
      }
    } @else {
      .active\:#{$name}-#{$k}:active {
        #{$prop}: $v;
      }
    }
  }
}

// breakpoints
// extra small
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .xs\:#{$name} {
        @include xs {
          #{$prop}: $v;
        }
      }
    } @else {
      .xs\:#{$name}-#{$k} {
        @include xs {
          #{$prop}: $v;
        }
      }
    }
  }
}

// small
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .sm\:#{$name} {
        @include sm {
          #{$prop}: $v;
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include sm {
          #{$prop}: $v;
        }
      }
    }
  }
}

// medium
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .md\:#{$name} {
        @include md {
          #{$prop}: $v;
        }
      }
    } @else {
      .md\:#{$name}-#{$k} {
        @include md {
          #{$prop}: $v;
        }
      }
    }
  }
}

// large
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .lg\:#{$name} {
        @include lg {
          #{$prop}: $v;
        }
      }
    } @else {
      .lg\:#{$name}-#{$k} {
        @include lg {
          #{$prop}: $v;
        }
      }
    }
  }
}

// extra large
@each $name, $map in $transform {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .xl\:#{$name} {
        @include xl {
          #{$prop}: $v;
        }
      }
    } @else {
      .xl\:#{$name}-#{$k} {
        @include xl {
          #{$prop}: $v;
        }
      }
    }
  }
}
