@use '../utils' as *;

$extra: (
  'uppercase': (
    'prop': 'text-transform',
    'values': (
      'default': uppercase,
    ),
  ),
  'lowercase': (
    'prop': 'text-transform',
    'values': (
      'default': lowercase,
    ),
  ),
  'capitalize': (
    'prop': 'text-transform',
    'values': (
      'default': capitalize,
    ),
  ),
  'flex': (
    'prop': 'display',
    'values': (
      'default': flex,
    ),
  ),
  'grid': (
    'prop': 'display',
    'values': (
      'defualt': grid,
    ),
  ),
  'block': (
    'prop': 'display',
    'values': (
      'defualt': block,
    ),
  ),
  'inline': (
    'prop': 'display',
    'values': (
      'defualt': inline,
    ),
  ),
  'inline\-block': (
    'prop': 'display',
    'values': (
      'defualt': inline-block,
    ),
  ),
  'inline\-flex': (
    'prop': 'display',
    'values': (
      'defualt': inline-flex,
    ),
  ),
  'inline\-grid': (
    'prop': 'display',
    'values': (
      'defualt': inline-grid,
    ),
  ),
  'contents': (
    'prop': 'display',
    'values': (
      'defualt': contents,
    ),
  ),
  'hidden': (
    'prop': 'display',
    'values': (
      'defualt': none,
    ),
  ),
  'fixed': (
    'prop': 'position',
    'values': (
      'defualt': fixed,
    ),
  ),
  'relative': (
    'prop': 'position',
    'values': (
      'defualt': relative,
    ),
  ),
  'absolute': (
    'prop': 'position',
    'values': (
      'defualt': absolute,
    ),
  ),
  'col': (
    'prop': 'grid-column',
    'values': (
      'auto': auto,
      'span\-1': #{'span 1 / span 1'},
      'span\-2': #{'span 2 / span 2'},
      'span\-3': #{'span 3 / span 3'},
      'span\-4': #{'span 4 / span 4'},
      'span\-5': #{'span 5 / span 5'},
      'span\-6': #{'span 6 / span 6'},
      'span\-7': #{'span 7 / span 7'},
      'span\-8': #{'span 8 / span 8'},
      'span\-9': #{'span 9 / span 9'},
      'span\-10': #{'span 10 / span 10'},
      'span\-11': #{'span 11 / span 11'},
      'span\-12': #{'span 12 / span 12'},
      'span\-full': #{'1 / -1'},
    ),
  ),
  'col-start': (
    'prop': 'grid-column-start',
    'values': (
      'auto': auto,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      '10': 10,
      '11': 11,
      '12': 12,
      '13': 13,
    ),
  ),
  'col-end': (
    'prop': 'grid-column-end',
    'values': (
      'auto': auto,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      '10': 10,
      '11': 11,
      '12': 12,
      '13': 13,
    ),
  ),
  'row': (
    'prop': 'grid-row',
    'values': (
      'auto': auto,
      'span\-1': #{'span 1 / span 1'},
      'span\-2': #{'span 2 / span 2'},
      'span\-3': #{'span 3 / span 3'},
      'span\-4': #{'span 4 / span 4'},
      'span\-5': #{'span 5 / span 5'},
      'span\-6': #{'span 6 / span 6'},
      'span\-7': #{'span 7 / span 7'},
      'span\-8': #{'span 8 / span 8'},
      'span\-9': #{'span 9 / span 9'},
      'span\-10': #{'span 10 / span 10'},
      'span\-11': #{'span 11 / span 11'},
      'span\-12': #{'span 12 / span 12'},
      'span\-full': #{'1 / -1'},
    ),
  ),
  'row-start': (
    'prop': 'grid-row-start',
    'values': (
      'auto': auto,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      '10': 10,
      '11': 11,
      '12': 12,
      '13': 13,
    ),
  ),
  'row-end': (
    'prop': 'grid-row-end',
    'values': (
      'auto': auto,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      '10': 10,
      '11': 11,
      '12': 12,
      '13': 13,
    ),
  ),
);

// generate utility classes
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .#{$name} {
        #{$prop}: $v;
      }
    } @else {
      .#{$name}-#{$k} {
        #{$prop}: $v;
      }
    }
  }
}

// hover
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .hover\:#{$name}:hover {
        #{$prop}: $v;
      }
    } @else {
      .hover\:#{$name}-#{$k}:hover {
        #{$prop}: $v;
      }
    }
  }
}

// focus
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .focus\:#{$name}:focus {
        #{$prop}: $v;
      }
    } @else {
      .focus\:#{$name}-#{$k}:focus {
        #{$prop}: $v;
      }
    }
  }
}

// active
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .active\:#{$name}:active {
        #{$prop}: $v;
      }
    } @else {
      .active\:#{$name}-#{$k}:active {
        #{$prop}: $v;
      }
    }
  }
}

// breakpoints
// extra small
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .sm\:#{$name} {
        @include xs {
          #{$prop}: $v;
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include xs {
          #{$prop}: $v;
        }
      }
    }
  }
}

// small
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .sm\:#{$name} {
        @include sm {
          #{$prop}: $v;
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include sm {
          #{$prop}: $v;
        }
      }
    }
  }
}

// medium
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .md\:#{$name} {
        @include md {
          #{$prop}: $v;
        }
      }
    } @else {
      .md\:#{$name}-#{$k} {
        @include md {
          #{$prop}: $v;
        }
      }
    }
  }
}

// large
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .lg\:#{$name} {
        @include lg {
          #{$prop}: $v;
        }
      }
    } @else {
      .lg\:#{$name}-#{$k} {
        @include lg {
          #{$prop}: $v;
        }
      }
    }
  }
}

// extra large
@each $name, $map in $extra {
  $prop: map-get($map, 'prop');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .xl\:#{$name} {
        @include xl {
          #{$prop}: $v;
        }
      }
    } @else {
      .xl\:#{$name}-#{$k} {
        @include xl {
          #{$prop}: $v;
        }
      }
    }
  }
}
