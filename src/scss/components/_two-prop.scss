@use '../utils' as *;

$two-prop: (
  'px': (
    'prop1': 'padding-left',
    'prop2': 'padding-right',
    'values': (
      '0': 0,
      '0#{\.}5': calc($base-padding / 2),
      '1': $base-padding,
      '1#{\.}5': $base-padding * 2,
      '2': $base-padding * 3,
      '2#{\.}5': $base-padding * 4,
      '3': $base-padding * 5,
      '3#{\.}5': $base-padding * 6,
      '4': $base-padding * 7,
      '5': $base-padding * 8,
      '6': $base-padding * 10,
      '7': $base-padding * 12,
      '8': $base-padding * 14,
      '9': $base-padding * 16,
      '10': $base-padding * 18,
      '11': $base-padding * 20,
      '12': $base-padding * 22,
      '14': $base-padding * 24,
      '16': $base-padding * 26,
      '20': $base-padding * 28,
      '24': $base-padding * 30,
      '28': $base-padding * 32,
      '32': $base-padding * 40,
      '36': $base-padding * 48,
      '40': $base-padding * 56,
      '44': $base-padding * 64,
      '48': $base-padding * 72,
      '52': $base-padding * 80,
      '56': $base-padding * 88,
      '60': $base-padding * 96,
      '64': $base-padding * 104,
      '72': $base-padding * 112,
      '80': $base-padding * 120,
      '88': $base-padding * 128,
      '96': $base-padding * 144,
      '104': $base-padding * 160,
      '112': $base-padding * 176,
      '120': $base-padding * 192,
      '128': $base-padding * 208,
      '136': $base-padding * 224,
      '144': $base-padding * 240,
      '152': $base-padding * 256,
    ),
  ),
  'mx': (
    'prop1': 'margin-left',
    'prop2': 'margin-right',
    'values': (
      '0': 0,
      'auto': auto,
      '0#{\.}5': calc($base-margin / 2),
      '1': $base-margin,
      '1#{\.}5': $base-margin * 2,
      '2': $base-margin * 3,
      '2#{\.}5': $base-margin * 4,
      '3': $base-margin * 5,
      '3#{\.}5': $base-margin * 6,
      '4': $base-margin * 7,
      '5': $base-margin * 8,
      '6': $base-margin * 10,
      '7': $base-margin * 12,
      '8': $base-margin * 14,
      '9': $base-margin * 16,
      '10': $base-margin * 18,
      '11': $base-margin * 20,
      '12': $base-margin * 22,
      '14': $base-margin * 24,
      '16': $base-margin * 26,
      '20': $base-margin * 28,
      '24': $base-margin * 30,
      '28': $base-margin * 32,
      '32': $base-margin * 40,
      '36': $base-margin * 48,
      '40': $base-margin * 56,
      '44': $base-margin * 64,
      '48': $base-margin * 72,
      '52': $base-margin * 80,
      '56': $base-margin * 88,
      '60': $base-margin * 96,
      '64': $base-margin * 104,
      '72': $base-margin * 112,
      '80': $base-margin * 120,
      '88': $base-margin * 128,
      '96': $base-margin * 144,
      '104': $base-margin * 160,
      '112': $base-margin * 176,
      '120': $base-margin * 192,
      '128': $base-margin * 208,
      '136': $base-margin * 224,
      '144': $base-margin * 240,
      '152': $base-margin * 256,
    ),
  ),
  'center': (
    'prop1': 'justify-content',
    'prop2': 'align-content',
    'values': (
      'default': center,
    ),
  ),
);

// generate utility classes
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .#{$name} {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .#{$name}-#{$k} {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// hover
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .hover\:#{$name}:hover {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .hover\:#{$name}-#{$k}:hover {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// focus
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .focus\:#{$name}:focus {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .focus\:#{$name}-#{$k}:focus {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// active
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .active\:#{$name}:active {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .active\:#{$name}-#{$k}:active {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// breakpoints
// extra small
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .sm\:#{$name} {
        @include xs {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include xs {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    }
  }
}

// small
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .sm\:#{$name} {
        @include sm {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include sm {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    }
  }
}

// medium
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .md\:#{$name} {
        @include md {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    } @else {
      .md\:#{$name}-#{$k} {
        @include md {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    }
  }
}

// large
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .lg\:#{$name} {
        @include lg {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    } @else {
      .lg\:#{$name}-#{$k} {
        @include lg {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    }
  }
}

// extra large
@each $name, $map in $two-prop {
  $prop1: map-get($map, 'prop1');
  $prop2: map-get($map, 'prop2');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($k == 'default') {
      .xl\:#{$name} {
        @include xl {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    } @else {
      .xl\:#{$name}-#{$k} {
        @include xl {
          #{$prop1}: $v;
          #{$prop2}: $v;
        }
      }
    }
  }
}
