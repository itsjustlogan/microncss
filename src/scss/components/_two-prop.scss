@use '../utils' as *;

$two-prop: (
  "px": (
    "prop1": "padding-left",
    "prop2": "padding-right",
    "values": (
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 4,
      "4": $base-padding * 6,
      "5": $base-padding * 8,
    ),
  ),
  "mx": (
    "prop1": "margin-left",
    "prop2": "margin-right",
    "values": (
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8,
    ),
  ),
  "center": (
    "prop1": "justify-content",
    "prop2": "align-content",
    "values": (
      "default": center,
    ),
  ),
);

// generate utility classes
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .#{$name} {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .#{$name}-#{$k}{
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// hover
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .hover\:#{$name}:hover {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .hover\:#{$name}-#{$k}:hover {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// focus
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .focus\:#{$name}:focus {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .focus\:#{$name}-#{$k}:focus {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// active
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .active\:#{$name}:active {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    } @else {
      .active\:#{$name}-#{$k}:active {
        #{$prop1}: $v;
        #{$prop2}: $v;
      }
    }
  }
}

// breakpoints
// small
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .sm\:#{$name} {
        @include sm {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    } @else {
      .sm\:#{$name}-#{$k} {
        @include sm {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    }
  }
}

// medium
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .md\:#{$name} {
        @include md {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    } @else {
      .md\:#{$name}-#{$k} {
        @include md {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    }
  }
}

// large
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .lg\:#{$name} {
        @include lg {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    } @else {
      .lg\:#{$name}-#{$k} {
        @include lg {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    }
  }
}

// extra large
@each $name, $map in $two-prop {
  $prop1: map-get($map, "prop1");
  $prop2: map-get($map, "prop2");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .xl\:#{$name} {
        @include xl {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    } @else {
      .xl\:#{$name}-#{$k} {
        @include xl {
          #{$prop1}: $v;
          #{$prop2}: $v;  
        }
      }
    }
  }
}
